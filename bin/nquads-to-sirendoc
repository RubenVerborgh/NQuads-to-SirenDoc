#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    spawn = require('child_process').spawn,
    mkdirp = require('mkdirp'),
    byline = require('byline'),
    print = console.log;

var regQuad = /^\s*(<[^>]+>)\s+(<[^>]+>)\s+(<[^>]+>|".*"(?:@[^ ]+|\^\^<[^>]+>)?)\s+(<[^>]+>)\s*\.\s*$/;
var noop =Â function () {};

if (process.argv.length != 4)
  error('usage:', path.basename(process.argv[1]),
                  '<nquad source> <destination>');

// Set up source
var source = process.argv[2];
if(!fs.existsSync(source))
  error(source, 'does not exist');

// Clear destination folder and start document creation
var destination = process.argv[3];
spawn('rm', ['-rf', destination]).on('exit', function () {
  mkdirp.sync(destination);
  processBySubject();
});

// Write all quads' metadata and outgoing triples
function processBySubject (callback) {
  var currentSubject,
      currentFolder,
      archiveCount = 1,
      entityCount = 0,
      quads;
  print('Writing metadata and outgoing triples...');
  var bySubject = spawn('sort', [source]);
  var quadStream = byline(bySubject.stdout).on('data', function (line) {
    var quad = parseQuad(line);
    if (quad) {
      // Start a new entity if the subject is different
      if (quad.subject !== currentSubject) {
        // Write outgoing quads of previous triple,
        // since they are complete now
        if (currentSubject) {
          writeOutgoing(quads, currentFolder);
          // also create an empty incoming file
          writeIncoming([], currentFolder);
        }

        // Generate partial archive when sufficiently large
        if (entityCount >= 50000) {
          // Pause while archiving
          quadStream.pause();
          archive(archiveCount, function () { quadStream.resume(); });

          // Start entity number from zero in new archive
          entityCount = 0;
          archiveCount++;
        }

        // Start new entity
        currentSubject = quad.subject;
        currentFolder = createFolder(archiveCount, ++entityCount);
        writeMetadata(quad, currentFolder);
        quads = [];
      }
      // Add the quad to the list of outgoing relations
      quads.push(quad);
    }
  }).on('end', function () {
    if (entityCount) {
      // Write last entity
      writeOutgoing(quads, currentFolder);
      writeIncoming([], currentFolder);
      // Create last archive
      archive(archiveCount++);
    }
    if (callback)
      callback();
  });
}

// Create a folder for a quad
function createFolder(archiveId, entityNumber) {
  var folder = getFolderName(archiveId, entityNumber);
  mkdirp.sync(folder);
  return folder;
}

// Get the folder name based on the entity number
var maxFolderEntities = 1,
    idLength = 5;
function getFolderName(archiveId, entityNumber) {
  var docId = Math.floor(entityNumber / maxFolderEntities).toString(),
      entityId = (entityNumber % maxFolderEntities).toString();

  return destination + '/tmp' + archiveId
                     + '/docID' + withLeadingZeros(docId, idLength)
                     + '/entityID' + withLeadingZeros(entityId, idLength)
                     + '/';
}

// Write metadata file for a quad
function writeMetadata(quad, currentFolder) {
  fs.writeFileSync(currentFolder + 'metadata',
                   quad.subject + '\n' + quad.subject);
}

// Write the quads as outgoing triples
function writeOutgoing(quads, currentFolder) {
  writeAsTriples(quads, currentFolder + 'outgoing-triples.nt');
}

// Write the quads as incoming triples
function writeIncoming(quads, currentFolder) {
  writeAsTriples(quads, currentFolder + 'incoming-triples.nt');
}

// Write the quads as triples
function writeAsTriples(quads, file) {
  var triples = '';
  for (var i = 0; i < quads.length; i++)
    triples += quads[i].subject + ' ' + quads[i].predicate + ' ' + quads[i].object + ' .\n';
  fs.writeFileSync(file, triples);
}

// Parse a quad into components
function parseQuad(line) {
  var match = line.match(regQuad);
  return match && { subject:   match[1],
                    predicate: match[2],
                    object:    match[3],
                    context:   match[4],
                  };
}

// Get the entity subject from the metadata
function getMetadataSubject(folder) {
  var metadataFile = folder + 'metadata';
  if (fs.existsSync(metadataFile)) {
    var metadata = fs.readFileSync(metadataFile, 'utf8');
    return metadata.split('\n')[1];
  }
}

// Archive a group of document folders
function archive(archiveId, callback) {
  // Find documents to archive
  var folder = destination + '/tmp' + archiveId + '/',
      indexFile = folder + '/index.txt',
      index = [];

  // Generate index
  fs.readdirSync(folder).sort().forEach(function (doc) {
    fs.readdirSync(folder + doc).sort().forEach(function (entity) {
      var entityFolder = doc + '/' + entity + '/';
      index.push(entityFolder + 'metadata',
                 entityFolder + 'outgoing-triples.nt',
                 entityFolder + 'incoming-triples.nt');
    });
  });
  fs.writeFileSync(indexFile, index.join('\n'));

  // Start archiving
  print('Creating archive ' + archiveId);
  var tar = spawn('tar', ['-T', indexFile, '-czf',
                          '../DE-' + withLeadingZeros(archiveId, 5) + '.tar.gz'],
                  { cwd: folder });

  // Report errors
  tar.stderr.setEncoding('utf8');
  tar.stderr.on('data', function (data) {
    error('Creating archive of ' + folder + ' failed: ' + data);
  });

  // Delete folder after completion
  tar.on('exit', function () {
    spawn('rm', ['-rf', folder]).on('exit', callback || noop);
  });
}

// Returns a number of the specified total length, padded with leading zeros
function withLeadingZeros(number, length) {
  number = '' + number;
  length -= number.length;
  while (length--)
    number = '0' + number
  return number;
}

// Terminate with an error message
function error() {
  console.error.apply(this, arguments);
  process.exit(1);
}
